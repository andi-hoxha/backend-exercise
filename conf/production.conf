include "application.conf"

mode="production"

play.filters.cors  {
  allowedOrigins = [${?PLAY_HOST}, ${?PLAY_CORS_HOST_1}, ${?PLAY_CORS_HOST_2}]
}

play.filters.hosts {
  allowed = [${?PLAY_ALLOWED_HOST}, ${?PLAY_ALLOWED_HOST_1}, ${?PLAY_ALLOWED_HOST_2}]
}

akka {
  loglevel = INFO
  actor {
    allow-java-serialization = on
    serializers {
      java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    provider = "cluster"
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = off
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off
    }
  }
  log-dead-letters = off
  actor-system = "backend-exercise"
  discovery {
    method = kubernetes-api
    kubernetes-api {
      pod-namespace = "default" // in which namespace cluster is running
      pod-namespace = ${?K8S_NAMESPACE}
      pod-label-selector = "app=akka-simple-cluster" // selector - hot to find other cluster nodes
      pod-label-selector = ${?K8S_SELECTOR}
      pod-port-name = "management" // name of cluster management port
      pod-port-name = ${?K8S_MANAGEMENT_PORT}
    }
  }
  http {
    hostname = "127.0.0.1"
    hostname = ${?HOSTNAME}
    bind-hostname = "0.0.0.0"
    port = 8558
    bind-port = 8558
  }
  cluster {
    min-nr-of-members = ${?AKKA_CLUSTER_MIN_NR_MEMBERS}
    shutdown-after-unsuccessful-join-seed-nodes = 30s
  }
  coordinated-shutdown.exit-jvm = off
  management {
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "backend-exercise"
        discovery-method = kubernetes-api,
        required-contact-point-nr = 1
      }
    }
  }
}